# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'calculus.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
#from sympy.abc import x, y
from sympy import *
from sympy import oo, Interval
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import numpy as np
import re
import math


class Canvas(FigureCanvas):

    text = ""
    func = ""

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        self.fig = plt.figure(figsize=(width, height), dpi=dpi)
        super().__init__(self.fig)
        self.setParent(parent)
        self.ax = self.fig.add_subplot(1, 1, 1)

    def f(self, x):
        return eval(self.text)
    
    def sec(self, x):
        return (1/np.cos(x))
    def csc(self, x):
        return (1/np.sin(x))

    def replace_numpy_funcs(self, func_str):
        replacements = {
            # log
            r'\blog\b': 'np.log10',
            r'\bln\b': 'np.log',
            # Inverse
            r'\barctan\b': 'np.arctan',
            r'\barcsin\b': 'np.arcsin',
            r'\barccos\b': 'np.arccos',
            # Inverse hyperbolic
            r'\barcsinh\b': 'np.arcsinh',
            r'\barccosh\b': 'np.arccosh',
            r'\barctanh\b': 'np.arctanh',
            # trig
            r'\bsin\b': 'np.sin',
            r'\bcos\b': 'np.cos',
            r'\btan\b': 'np.tan',
            # hyperbolic
            r'\bsinh\b': 'np.sinh',
            r'\bcosh\b': 'np.cosh',
            r'\btanh\b': 'np.tanh',
            # exp
            r'\bexp\b': 'np.exp',
            # abs
            r'\babs\b': 'np.absolute',
            # sign(x)
            r'\bsign\b': 'np.sign',
            #gyok
            r'\bsqrt\b': 'np.sqrt',
            #szekánsok
            r'\bsec\b': 'self.sec',
            r'\bcsc\b': 'self.csc'
        }

        for pattern, replacement in replacements.items():
            func_str = re.sub(pattern, replacement, func_str)

        return func_str

    def check_for_large_jumps(self, y_vals, threshold):
        diff = np.abs(np.diff(y_vals))
        jumps = np.where(diff > threshold)[0]
        return jumps

    def plot_function(self, func_str, interval):

        if not hasattr(self, 'exp_first_time'):
            self.exp_first_time = True

        self.ax.clear()

        self.func = func_str.replace("A", "a")
        func_str = self.replace_numpy_funcs(func_str.replace("^", "**")).replace("A", "a")
        self.text = func_str
        print("self: " + self.text)
        print(interval)

        x_vals = np.linspace(interval[0], interval[1], 100000)
        y_vals = 0

        threshold = 10
        if "tan" in func_str:
            y_vals = self.f(x_vals)

            large_jumps = self.check_for_large_jumps(y_vals, threshold)

            for idx in large_jumps:
                y_vals[idx] = np.nan
            self.ax.set_ylim(-10, 10)

        elif "sec" in func_str:
            y_vals = self.f(x_vals)

            large_jumps = self.check_for_large_jumps(y_vals, threshold)
            
            for idx in large_jumps:
                y_vals[idx] = np.nan
            self.ax.set_ylim(-10, 10)

        elif "csc" in func_str:
            y_vals = self.f(x_vals)

            large_jumps = self.check_for_large_jumps(y_vals, threshold)
            
            for idx in large_jumps:
                y_vals[idx] = np.nan
            self.ax.set_ylim(-10, 10)
        else:
            y_vals = self.f(x_vals)

        
        self.ax.plot(x_vals, y_vals, label=f'y = {self.func}')
        self.ax.set_xlabel('x') 
        #self.ax.set_ylim(interval[0],interval[1])
        self.ax.set_ylabel('f(x)') 
        self.ax.grid(True) 
        self.ax.legend()  
        self.fig.savefig('plot.png')

class Ui_Calculus(object):

    def extract_variable(self, expression):
        pattern = r'[a-zA-Z]+'
        
        matches = re.findall(pattern, expression)
        
        if matches:
            return matches[0]
        else:
            return None

    def has_no_variables(self, func_str):
        # Define a regular expression pattern to match mathematical variables
        var_pattern = r'[a-zA-Z]+'
        # Find all matches of variables in the function string
        variables = re.findall(var_pattern, func_str)
        # If no variables are found, return True
        return len(variables) == 0

    def replace_sympy_funcs(self, func_str):
        replacements = {
            r'\b(ln)\b': 'log',
            #trig
            r'\bsin\b': 'sin',
            r'\bcos\b': 'cos',
            r'\btan\b': 'tan',
            #Iverzek
            r'\barctan\b': 'atan',
            r'\barcsin\b': 'asin',
            r'\barccos\b': 'acos',
            #inverze hyperbolic
            r'\barcsinh\b': 'asinh',
            r'\barccosh\b': 'acosh',
            r'\barctanh\b': 'atanh',
            #hyperbolic
            r'\bsinh\b': 'sinh',
            r'\bcosh\b': 'cosh',
            r'\btanh\b': 'tanh',
            #exp
            r'\bexp\b': 'exp',
            #abs
            r'\babs\b': 'Abs',
            #sign(x)
            r'\sign\b': 'sign',
            #gyok
            r'\bsqrt\b': 'sqrt',
            #szekánsok
            r'\bsec\b': 'sec',
            r'\bcsc\b': 'csc'
        }

        for pattern, np_func in replacements.items():
            func_str = re.sub(pattern, np_func, func_str)

        func_str = func_str.replace("^", "**")
        
        return func_str

    def combobox_selector(self):
        also = 0
        felso = 0
        
        #pi
        if 'pi' in self.lineEdit_2.text() or 'pi' in self.lineEdit_3.text():
            also = int(int(self.lineEdit_2.text().split(" ")[0]) * math.pi)

            felso = int(int(self.lineEdit_3.text().split(" ")[0]) * math.pi)
            interval = (also, felso)
        else:
            also = sympify(self.lineEdit_2.text())
            felso = sympify(self.lineEdit_3.text())
            #inf
            if sympify(self.lineEdit_2.text()) == -oo:
                also = -1000000000
            
            if sympify(self.lineEdit_3.text()) == oo:
                felso = 1000000000

            #nulla
            if sympify(self.lineEdit_2.text()) == 0:
                also = 0
            
            if sympify(self.lineEdit_3.text()) == 0:
                felso = 0

            #nem nulla
            if sympify(self.lineEdit_2.text()) != 0:
                also = float(also)
            
            if sympify(self.lineEdit_3.text()) != 0:
                felso = float(felso)

        text = self.lineEdit.text()
        x = Symbol('x', real=True)

        input = self.comboBox.currentText()
        interval = (also, felso)

        if input == "Növekvő":
            res = is_increasing(sympify(self.replace_sympy_funcs(text)), Interval(also,felso))
            if res == True:
                self.label_2.setText(text + " növekvő")
            else:
                self.label_2.setText(text + " nem növekvő")
            self.canvas.plot_function(text, interval)
        
        if input == "Szigorúan növekvő":
            res = is_strictly_increasing(sympify(self.replace_sympy_funcs(text)), Interval(also,felso))
            if res == True:
                self.label_2.setText(text + " szigorúan növekvő")
            else:
                self.label_2.setText(text + " szigorúan nem növekvő")
            self.canvas.plot_function(text, interval)
        
        if input == "Csökkenő":
            res = is_decreasing(sympify(self.replace_sympy_funcs(text)), Interval(also,felso))
            if res == True:
                self.label_2.setText(text + " Csökkenő")
            else:
                self.label_2.setText(text + " nem csökkenő")
            self.canvas.plot_function(text, interval)
        
        if input == "Szigorúan csökkenő":
            res = is_strictly_decreasing(sympify(self.replace_sympy_funcs(text)), Interval(also,felso))
            if res == True:
                self.label_2.setText(text + " szigorúan csökkenő")
            else:
                self.label_2.setText(text + " szigorúan nem csökkenő")
            self.canvas.plot_function(text, interval)

        if input == "Monoton":
            res = is_monotonic(sympify(self.replace_sympy_funcs(text)), Interval(also,felso))
            if res == True:
                self.label_2.setText(text + " Monoton")
            else:
                self.label_2.setText(text + " nem monoton")
            self.canvas.plot_function(text, interval)
        
        if input == "Divergens":
            res = limit(sympify(text), x, oo)
            if res == oo:
                self.label_2.setText(text + " Divergens")
            else:
                self.label_2.setText(text + " Nem divergens")
            self.canvas.plot_function(text, interval)
        
        if input == "Határérték":
            if self.has_no_variables(text):
                self.label_2.setText(text + " -> " + str(eval(text)))
            else:
                res = limit(sympify(text), x, oo)
                self.label_2.setText(text + " -> " + str(res))
            self.canvas.plot_function(text, interval)
        
        if input == "Konvergens":

            res = (Sum(text, (x, also, felso)).is_convergent())
            if res:
                self.label_2.setText(text + " a sorozat konvergál.")
            else:
                self.label_2.setText(text + " a sorozat nem konvergál.")
            self.canvas.plot_function(text, interval)
        
        if input == "Deriválás":
            tmp = eval(self.replace_sympy_funcs(text))
            #print(tmp)
            res = diff((tmp), x)
            self.label_2.setText(str(res))
            res_str = str(res)
            self.canvas.plot_function(res_str, interval)
        
        if input == "Integrálás":
            x = Symbol('x')
            res = integrate(self.replace_sympy_funcs(text), x)
            self.label_2.setText(str(res).replace("**", "^") +" + C")
            res_str = str(res)
            try:
                self.canvas.plot_function(res_str, interval)
            except Exception as e:
                print(e)
        
    def setupUi(self, Calculus, MainWindow):
        Calculus.setObjectName("Calculus")
        Calculus.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(Calculus)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(10, 70, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(12)

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(310, 10, 61, 51))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(380, 10, 61, 51))
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.canvas = Canvas(self.centralwidget)
        self.canvas.setGeometry(QtCore.QRect(10, 200, 780, 360))

        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 231, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 130, 780, 70))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(250, 70, 451, 51))
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(250, 10, 91, 41))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.combobox_selector())
        self.pushButton.setGeometry(QtCore.QRect(710, 70, 75, 51))
        self.pushButton.setObjectName("pushButton")

        Calculus.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Calculus)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        Calculus.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Calculus)
        self.statusbar.setObjectName("statusbar")
        Calculus.setStatusBar(self.statusbar)

        self.retranslateUi(Calculus)
        QtCore.QMetaObject.connectSlotsByName(Calculus)

    def retranslateUi(self, Calculus):
        _translate = QtCore.QCoreApplication.translate
        Calculus.setWindowTitle(_translate("Calculus", "MainWindow"))
        self.comboBox.setItemText(0, _translate("Calculus", "Növekvő"))
        self.comboBox.setItemText(1, _translate("Calculus", "Szigorúan növekvő"))
        self.comboBox.setItemText(2, _translate("Calculus", "Csökkenő"))
        self.comboBox.setItemText(3, _translate("Calculus", "Szigorúan csökkenő"))
        self.comboBox.setItemText(4, _translate("Calculus", "Monoton"))
        self.comboBox.setItemText(5, _translate("Calculus", "Divergens"))
        self.comboBox.setItemText(6, _translate("Calculus", "Határérték"))
        self.comboBox.setItemText(7, _translate("Calculus", "Konvergens"))
        self.comboBox.setItemText(8, _translate("Calculus", "Deriválás"))
        self.comboBox.setItemText(9, _translate("Calculus", "Integrálás"))
        self.label.setText(_translate("Calculus", "Válaszd ki a végrahajtandó műveletet"))
        self.label_2.setText(_translate("Calculus", "Erdemény"))
        self.label_3.setText(_translate("Calculus", "Határok:"))
        self.lineEdit_2.setText(_translate("Calculus", "-10"))
        self.lineEdit_3.setText(_translate("Calculus", "10"))
        self.pushButton.setText(_translate("Calculus", "Enter"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Calculus = QtWidgets.QMainWindow()
    ui = Ui_Calculus()
    ui.setupUi(Calculus)
    Calculus.show()
    sys.exit(app.exec_())
